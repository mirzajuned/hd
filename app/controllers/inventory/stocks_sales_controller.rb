# rubocop:disable all
class Inventory::StocksSalesController < ApplicationController
  before_action :authorize
  before_action :sales_report, only: [:lot_sales_report, :stock_movement_report]

  def lot_sales_report
  end

  def download_lot_valuation_report
    store = Inventory::Store.find(params[:store_id])
    options = { store_id: params[:store_id], end_time: params[:end_time], end_date: params[:end_date] }
    user = params[:user_id] = User.find_by(id: current_user.id).fullname
    @store_name = "#{store.name} Stocks Valuation Report for " "#{Time.parse(params['end_date']).strftime('%d %B %Y')}" 
    @address = store.address.titleize
    @generate_on = "Generated On: #{Time.now.try(:strftime, '%R:%S')} | #{Time.now.strftime('%d %B %Y')} | #{Date.today.strftime('%A')}"
    @generate_by = "Generated By: #{current_user.fullname&.titleize}"
    @filename = "#{store.name.squish&.titleize&.tr(' ', '_')}_#{Time.now.strftime('%d %B %Y')}_#{Time.now.try(:strftime, '%R:%S')}_#{user.squish&.titleize&.tr(' ', '_')}_valuation_report"
    @data_array, @total_purchase_value, @total_selling_value = Inventory::Lots::DownloadLotsService.call(options)
    respond_to do |format|
      format.html
      format.xlsx { headers['Content-Disposition'] = "attachment; filename=\"#{@filename}.xlsx\"" }
    end
  end

  def download_lot_sales_report
    store = Inventory::Store.find(params[:store_id])
    options = { store_id: params[:store_id], transaction_type: 'Invoice' }
    options = options.merge(user_id: params[:user_id]) if params[:user_id] != 'all_user'
    options[:transaction_time] = { :$gte => Time.parse(params['start_date'] + ' ' + params['start_time']),
                                   :$lte => Time.parse(params['end_date'] + ' ' + params['end_time']) }
    user = params[:user_id] == 'all_user' ? 'all_user' : User.find(params[:user_id]).fullname
    facility_id = store.facility_id || current_facility.id
    @facility_name = Facility.find(facility_id).display_name
    @store_name = "#{store.name} Stocks Sales Report"
    @address = store.address
    @time_period = "Report Period From #{params[:start_date]} #{params[:start_time]} to #{params[:end_date]}#{params[:end_time]}"
    @generate_on = "Generated On: #{Time.now.try(:strftime, '%R:%S')} | #{Time.now.strftime('%d %B %Y')} | #{Date.today.strftime('%A')}"
    @generate_by = "Generated By: #{user&.titleize}"
    @filename = "#{store.name.squish&.titleize&.tr(' ', '_')}_#{Time.now.strftime('%d %B %Y')}_#{Time.now.try(:strftime, '%R:%S')}_#{user.squish&.titleize&.tr(' ', '_')}_sales_report"
    calculate_lot_sales_report(options)
    if params[:format] == 'pdf'
      html_template = 'inventory/stocks_sales/download_lot_sales_report.html.erb'
      respond_to do |format|
        format.html
        format.pdf do
          @pdf = render_to_string pdf: 'mashpy', template: html_template, encoding: 'UTF-8',  page_size: 'A4',
                                  layout: 'invoice/inventory/pdfgen.html.erb', viewport_size: '1280 x 1024',
                                  show_as_html: params[:debug].present?, footer: { right: '[page] of [topage]' },
                                  locals: { mail_job: false }, margin: {top: 1}
          send_data(@pdf, filename: "#{@filename}.pdf", type: 'application/pdf')
        end
      end
    else
      respond_to do |format|
        format.html
        format.xlsx { headers['Content-Disposition'] = "attachment; filename=\"#{@filename}.xlsx\"" }
      end
    end
  end

  def stock_movement_report
    @first_lot_stock = Inventory::DailyLotStock.where(store_id: params[:store_id]).first
    @first_date = @first_lot_stock.present? ? @first_lot_stock.date : Date.current
  end

  def download_stock_movement_report
    store = Inventory::Store.find(params[:store_id])
    options = { store_id: params[:store_id], user: params[:user_id], start_date: params[:start_date], end_date: params[:end_date] }
    user = params[:user_id] == 'all_user' ? 'all_user' : User.find(params[:user_id]).fullname
    @facility_name = Facility.find(current_facility.id).display_name
    @store_name = "#{store.name} Stock Movement Report"
    @address = store.address
    @time_period = "Detailed Stock Movement Report For a Period of #{params[:start_date]} to #{params[:end_date]}"
    @generate_on = "Generated On: #{Time.now.try(:strftime, '%R:%S')} | #{Time.now.strftime('%d %B %Y')} | #{Date.today.strftime('%A')}"
    @generate_by = "Generated By: #{user&.titleize}"
    @filename = "#{store.name.squish&.titleize&.tr(' ', '_')}_#{Time.now.strftime('%d %B %Y')}_#{Time.now.try(:strftime, '%R:%S')}_#{user.squish&.titleize&.tr(' ', '_')}_stock_movement_report"
    @data_array = Inventory::Report::StockMovementReportService.call(options)
    respond_to do |format|
      format.html
      format.xlsx { headers['Content-Disposition'] = "attachment; filename=\"#{@filename}.xlsx\"" }
    end
  end

  private

  def calculate_lot_sales_report(options)
    @data_array = []
    @total_selling_value = 0
    @total_purchase_value = 0
    @total_margin = 0
    audit_histories = Inventory::Audit::History.where(options).group_by(&:lot_id)
    audit_histories.each do |_key, value|
      description = "#{value[0].lot_description&.titleize} #{value[0].variant_identifier&.titleize}".strip
      batch = value[0].batch_no || 'NA'
      model_no = value[0].model_no || 'NA'
      quantity = value.map { |qty| qty.stock_value.abs }.sum
      unit_cost = value[0].unit_cost
      total_unit_cost = unit_cost * quantity
      list_price = value[0].list_price
      total_list_price = list_price * quantity
      @total_purchase_value += unit_cost * quantity
      @total_selling_value += list_price * quantity
      margin = total_list_price - total_unit_cost
      @total_margin += margin
      @data_array << [description, batch, model_no, quantity, unit_cost, total_unit_cost, list_price, total_list_price, margin]
    end
  end

  def sales_report
    options = { :facility_ids.in => [current_facility.id], is_active: true }
    @all_user = User.where(options.merge(:inventory_store_ids.in => [params[:store_id]])).pluck(:fullname, :id)
    @start_date = params[:start_date]
    @end_date = params[:end_date]
    @inventory_store = Inventory::Store.find(params[:store_id])
  end
end
