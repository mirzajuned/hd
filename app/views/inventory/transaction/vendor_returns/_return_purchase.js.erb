function calculateTotalPrice() {
  var each_item_totals = 0;
  $('.price_including_tax').each(function(){
    each_item_totals += parseFloat($(this).val());
  });
  $("#inventory_transaction_vendor_return_total_cost").val(each_item_totals.toFixed(2))
  net_amount = parseFloat(each_item_totals - $('#inventory_transaction_vendor_return_return_discount').val())
  $("#inventory_transaction_vendor_return_return_amount").val(net_amount.toFixed(2))
  var total_payment = parseFloat($('#total_payment').val())
  var amount_remaining = net_amount - total_payment
  $("#total_payment_remaining").val(amount_remaining.toFixed(2))
}

$(".item-quantity").on('keyup', function() {
  var quantity = parseFloat($(this).val() || 0)
  /*var return_quantity = (quantity.length > 0) ? parseFloat(quantity) : 0.00
  var max_quantity = parseFloat($(this).closest(".return-medicine").find(".item_max_quantity").val())
  var final_return_quantity = return_quantity < max_quantity ? return_quantity : max_quantity
  var final_return_quantity = parseFloat(quantity) || 0.00
  $(this).val(final_return_quantity)*/
  var actual_quantity = $(this).closest(".return-medicine").find(".quantity").val()
  var item_unit_cost = $(this).closest(".return-medicine").find(".item_unit_cost").val()
  var item_total_cost = item_unit_cost * quantity
  $(this).closest(".return-medicine").find(".price_including_tax").val(item_total_cost.toFixed(2))
  calculateTotalPrice()
  calculateReturnPrice()
})

$('#vendor_id').on('click', function() {
  let vendor_name = $('#vendor_id option:Selected').text()
  $('#vendor_name').val(vendor_name)
});

// $('#inventory_transaction_vendor_return_vendor_location_id').select2()

function calculateReturnPrice() {
  var item_total_cost = parseFloat($('#inventory_transaction_vendor_return_total_cost').val() || 0)
  var return_discount = parseFloat($('#inventory_transaction_vendor_return_return_discount').val() || 0)
  var net_amount = item_total_cost - return_discount
  var debit_amount = parseFloat($('#payment_received_debit_amount').val() || 0)
  $("#inventory_transaction_vendor_return_return_amount").val(net_amount.toFixed(2))
  if ($('#full_settlement_pending').prop('checked')) {
    $("#inventory_transaction_vendor_return_debit_amount").val(debit_amount.toFixed(2))
    $("#total_debit_amount").val(debit_amount)
  }
  calculateTotalPrice()
}

function calculateTotalPrice() {
  var each_item_totals = 0;
  var each_item_tax_totals = 0;
  var each_item_return_totals = 0;
  // tax_amount = 0;
  $("#purchase_return_tax").html("")
  $('.price_including_tax').each(function(){
    each_item_return_totals += parseFloat($(this).val());
    each_item_tax_totals += calculate_total($(this))["tax_amount"];
    each_item_totals += calculate_total($(this))["cost_before_tax"];
    tax_amount = calculate_total($(this))["tax_amount"];
    id = $(this).attr("id")
    tax_name = $("#"+id.replace("total_cost","tax_name")).val();
    tax_amount = calculate_total($(this))["tax_amount"].toFixed(2);
    $("#"+id.replace("total_cost","purchase_tax_amount")).val(tax_amount);
    $("#purchase_return_tax").prepend(`<div class="col-sm-12">
          <div class="col-sm-6">
            <b>${tax_name}</b>
          </div>
          <div class="col-sm-2 text-center">
            :
          </div>
          <div class="col-sm-4">
            <input class="form-control p7_10 return-total-cost" style="background-image: none;" readonly="readonly" type="text" value="${tax_amount}">
          </div>
        </div>`)
    });
  $("#inventory_transaction_vendor_return_total_cost").val(each_item_totals.toFixed(2))
  net_amount = parseFloat(each_item_totals - $('#inventory_transaction_vendor_return_return_discount').val())
  $("#inventory_transaction_vendor_return_return_amount").val(each_item_return_totals.toFixed(2))
  var total_payment = parseFloat($('#total_payment').val())
  var amount_remaining = net_amount - total_payment
  $("#total_payment_remaining").val(amount_remaining.toFixed(2) || 0)
  $("#inventory_transaction_vendor_return_tax_amount").val(each_item_tax_totals.toFixed(2) || 0)
}

function calculate_total(_this){
  id = $(_this).attr("id");
  return_qty = parseFloat($("#"+id.replace("total_cost","stock")).val())
  net_unit_cost = parseFloat($("#"+id.replace("total_cost","pr_net_unit_cost_without_tax")).val()).toFixed(2)
  tax_rate = parseFloat($("#"+id.replace("total_cost","tax_rate")).val())
  cost_before_tax = net_unit_cost * return_qty || 0
  tax_amount = parseFloat(((cost_before_tax * tax_rate)/100)) || 0
  return {"cost_before_tax": cost_before_tax,"tax_amount": tax_amount}
}

$(".item-quantity").on('keyup',function(){
  id = $(this).attr("id")
  data = id.includes("stock") ? $(this).attr("id")  : $(this).attr("id") 
  value = id.includes("stock") ? "stock" : "pr_net_unit_cost_without_tax"
  return_qty = parseFloat($("#"+data.replace(value,"stock")).val())
  net_unit_cost_without_tax= parseFloat($("#"+data.replace(value,"pr_net_unit_cost_without_tax")).val()).toFixed(2) || 0
  tax_rate = parseFloat($("#"+data.replace(value,"tax_rate")).val())
  cost_before_tax = (net_unit_cost_without_tax * return_qty) || 0
  tax_amount = parseFloat(((cost_before_tax * tax_rate)/100))
  net_amount = cost_before_tax + tax_amount
  $("#"+data.replace(value,"total_cost")).val(net_amount.toFixed(2) || 0)
  unit_cost_without_tax = parseFloat($("."+data.replace(value,"unit_cost_without_tax")).text())
  margin = Math.abs((unit_cost_without_tax - net_unit_cost_without_tax)) || 0
  $("."+data.replace(value,"margin")).text(margin.toFixed(2))
  $("#"+data.replace(value,"margin")).val(margin.toFixed(2))
  calculateTotalPrice()
})


$('.return-changes').on('keyup', function() {
  calculateReturnPrice()
})

$('#payment_received_debit_amount').on('keyup', function() {
  calculateReturnPrice()
})

$('.transaction-datepicker').datepicker({
  dateFormat: "dd/mm/yy",
  maxDate: -0,
  minDate: -0
});

$('.full_settlement').on('click', function(){
  payment_type()
})

function payment_type() {
  if ($('.full_settlement:checked').attr("id") == 'full_settlement_now') {
    $('.payment_pending_details').hide();
    $('.pending_amount_details').hide();
  } else {
    $('.payment_pending_details').show();
    $('.pending_amount_details').show();
  }
}

payment_type()

function validate_inventory_return_transactions_form() {
  $("#inventory_return_purchase_form").validate({
    rules: {
      "inventory_transaction_vendor_return[return_amount]": {
        required: true,
        number: true,
      },
      "inventory_transaction_vendor_return[return_discount]": {
        number: true,
        min: 0,
      },
      "inventory_transaction_vendor_return[debit_amount]": {
        number: true,
        min: 0,
      },
    },
    messages: {
      "inventory_transaction_vendor_return[debit_amount]": {
        number: "Enter advance amount",
        min: "Advance cannot be more than return amount"
      },
    },
    errorPlacement: function (error, element) {
      var id = $(element).attr("id");
      var parent = $("#"+id).parents(".input-group").length
      if(parent == 0){
        error.insertAfter(element);
      } else {
        error.insertAfter($("#"+id).parents(".input-group"));
      }
    }
  });
}
validate_inventory_return_transactions_form()

$.validator.addMethod("TotalCost", function(value, element) {
  // if (parseFloat(value) > 0) {
  //   return true
  // }
  total_qty = 0
  if ($('.item-quantity').length > 0) {
  $('.item-quantity').each(function(){
    total_qty += parseFloat($(this).val()) || 0
  });
  } else {
   $('.item_quantity').each(function(){
    total_qty += parseFloat($(this).val()) || 0
   });   
  }
  return total_qty > 0
}, "Atleast one quantity is required");

$.validator.addMethod("ModeOfPayment", function(value, element) {
  var mop = $(element).val()
  var amount = $(element).closest(".payment_received_row").find(".payment_received_breakups_amount").val()
  if (($('#full_settlement_pending').prop('checked')) && parseFloat($('#inventory_transaction_vendor_return_paid_amount').val()) == 0) {
    return true
  } else if(mop != ""){
    return true
  } else if((parseFloat(amount) > 0) && (mop == "")) {
    return false
  } else if (mop == "") {
    return false
  } else {
    return true
  }
}, "MOP Required");

$.validator.addMethod("PaymentBreakup", function(value, element) {
  var amount = $(element).val()
  if (($('#full_settlement_pending').prop('checked')) && parseFloat($('#inventory_transaction_vendor_return_paid_amount').val()) == 0) {
    return true
  } else if (parseFloat(amount) < 0) {
    return false
  } else if (amount == "") {
    return false
  } else {
    return true
  }
}, "");

$.validator.addMethod("PaymentReceived", function(value, element) {
  $('#inventory_transaction_vendor_return_paid_amount').val(parseFloat($("#payment_received_total").val()))
  if ($('#full_settlement_pending').prop('checked')) {
    return parseFloat($("#inventory_transaction_vendor_return_return_amount").val()) == parseFloat($("#payment_received_total").val()) + parseFloat($("#total_debit_amount").val());
  } else {
    return parseFloat($("#inventory_transaction_vendor_return_return_amount").val()) == parseFloat($("#payment_received_total").val());
  }
}, "Review Payment Details");

$.validator.addMethod("CreditAmount", function(value, element) {
  if (parseFloat(value)  == parseFloat($("#inventory_transaction_vendor_return_debit_amount").val())) {
    return true
  }
}, "Return Amount and CreditAmount Should be Same");

$.validator.addMethod("Number", $.validator.methods.digits, "Quantity Should be Number");
$.validator.addMethod("checkQuantity", function(value, element, options) {
  var id = $(element).attr("id")
  var item_quantity = $('#'+id).val()
  var item_max_quantity = $('#'+id).siblings(".item_max_quantity").val()
  if (!item_max_quantity) {
    return true
  }
  else{
    return this.optional(element) || parseFloat(item_quantity) <= parseFloat(item_max_quantity);
  }
}, "Cannot Checkout more than stock");

$.validator.addClassRules("return-total-cost", { TotalCost: true });
$.validator.addClassRules("payment_received_breakups_mode_of_payment", { ModeOfPayment: true });
$.validator.addClassRules("payment_received_breakups_amount", { PaymentBreakup: true });
$.validator.addClassRules("total_payment", { PaymentReceived: true });
$.validator.addClassRules("payment-received-credit-amount", { CreditAmount: true });
$.validator.addClassRules("item_quantity", { number: true, checkQuantity: true, required: true, min: 0.1});
