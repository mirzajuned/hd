var checkItem = [];
// var tax_breakup = {}
$('.items-lots-list .inventory-list-row').unbind()
$('.items-lots-list .inventory-list-row').on('click', function(e){
  e.preventDefault();
  var lot_name =  $(this).find('.description').text();
  var id =  $(this).attr('id');
  if (!checkItem.includes(id)) {
    checkItem.push(id)
    $.ajax({
      type: 'GET',
      data: {
        lot_id: id,
        remote: true
      },
      url: '/invoice/inventory_invoices/add_lot',
      success: function(){
        $('#'+id).css('background-color', '#cfe8d2')
        $('#'+id).addClass('disabled_row')
      }
    })
  }
})

var search_type = $("#search_type").val()
searchTypeForm(search_type)

$("#lots_search_barcode").keypress(function(e) {
  if(e.which == 13) {
    if ($('#lots_search_barcode').val() != '') {
      $("#search_by_barcode").click();
    }
  }
});

$('#search_by_barcode').on('click', function(e) {
  e.preventDefault();
  $('#show_more_lots').show();
  var query = $('#lots_search_barcode').val()
  var searchtype = $("#search_type").val()
  if (query != '') {
    $.ajax({
      type : 'get',
      url: '/invoice/inventory_invoices/filter_lots',
      data: {
        q: query,
        search_type: searchtype,
        store_id: '<%= @inventory_store.id %>',
        item_type: '<%= @category %>',
        remote: 'true'
      },
    })
  }
})

$("input:text").focus(function() { $(this).select(); } );

$(window).resize(function() {
  adjust_height()
})

adjust_height()
function adjust_height(){
  modalContentHeigth = $(window).height() - 275
  $(".items-lots").height(modalContentHeigth)
  itemsLots = modalContentHeigth - $('.invoice-header').height()
  $('.items-lots-body').height(itemsLots)
  prescriptionHeight = $('.prescription-information').height()
  invoiceInfoHeight = $('.invoice-information').height()
  invoiceListHeight = modalContentHeigth - $('.invoice-title').height() - $('.invoice-common-fields').height() - prescriptionHeight - invoiceInfoHeight  - 70
  $('.invoice-table-body').height(invoiceListHeight - $('.invoice-table-head').height())
}

function filter_index(query) {
  if (query.length > 0){
    $(".items-lots-search").find(".fa").show()
  }
  else {
    $(".items-lots-search").find(".fa").hide()
  }
  $('#show_more_lots').show();
  $.ajax({
    type : 'get',
    url: '/invoice/inventory_invoices/filter_lots',
    data: {
      q: query,
      store_id: '<%= @inventory_store.id %>',
      item_type: '<%= @category %>',
      remote: 'true'
    },
  })
}

$(".items-lots-search").find(".fa").on('click',function(){
  $("#lots_search").val("")
  $("#lots_search_barcode").val("")
  $("#lots_search_generic_name").val("")
  filter_index("")
})

$("#lots_search").on("keyup", function () {
  query = $(this).val()
  filter_index(query)
})

$("#lots_search_generic_name").on("keyup", function () {
  query = $(this).val()
  if (query.length > 0){
    $(".items-lots-search").find(".fa").show()
  }
  else {
    $(".items-lots-search").find(".fa").hide()
  }  
  $('#show_more_lots').show();
  searchtype = $("#search_type").val()
  $.ajax({
    type : 'get',
    url: '/invoice/inventory_invoices/filter_lots',
    data: {
      q: query,
      search_type: searchtype,
      store_id: '<%= @inventory_store.id %>',
      item_type: '<%= @category %>',
      remote: 'true'
    },
  })
})

$("#lots_search_barcode").on("keyup", function () {
  query = $(this).val()
  if (query.length > 0){
    $(".items-lots-search").find(".fa").show()
  }
  else {
    $(".items-lots-search").find(".fa").hide()
  }
})

$('.searchtype').on('click', function() {
 var search_type = $(this).attr('input-value')
  searchTypeForm(search_type)
})

function searchTypeForm(search_type)
{
  if (search_type == 'Description') {
    $('.search-barcode').hide();
    $('#lots_search').show();
    $('#lots_search_barcode').hide();
    $('#lots_search_generic_name').hide()
  } else if (search_type =='GenericName'){
    $('.search-barcode').hide();
    $('#lots_search_barcode').hide();
    $('#lots_search').hide();
    $('#lots_search_generic_name').show()  
  } else{
    $('.search-barcode').show();
    $('#lots_search_barcode').show();
    $('#lots_search').hide();
    $('#lots_search_generic_name').hide()
  }
  $(".items-lots-search .fa").trigger('click')
}

function isScrolledIntoLastRow(last_row_elem, scrollable_container) {
  if (last_row_elem.length == 1) {
    var top_of_element = $(last_row_elem).offset().top - $(scrollable_container).offset().top ;
    var table_height = $(scrollable_container).innerHeight()
    return top_of_element <= table_height
  }
}

scrollinventory()
function scrollinventory(){
  $(".items-lots-body").scroll(function() {
    last_row_elem = $('.items-lots-body').find('tr:nth-last-child(1)')
    scrollable_container = $(".items-lots-body")
    if (isScrolledIntoLastRow(last_row_elem, scrollable_container)) {
      $("#show_more_lots").trigger("click")
      $(".items-lots-body").off('scroll');
      setTimeout(function() {   //calls click event after a certain time
        scrollinventory()
      }, 500);
    }
  })
}
$("#show_more_lots:visible").on('click', function(e){
  e.preventDefault();
  var total_count_row =  $('.items-lots-body tr').length;
  var query = ""
  var search_type = $("#search_type").val()
  switch(search_type) {
    case 'Description':
      query = $("#lots_search").val()
      break;
    case 'GenericName':
      query = $('#lots_search_generic_name').val()
      break;
    default:
      query = $('#lots_search_barcode').val()
  }  
  $.ajax({
    type: "GET",
    dataType: "script",
    data: {
      total_count_row: total_count_row,
      item_type: "<%= @category %>",
      store_id: "<%= @inventory_store.id %>",
      search_type: search_type,
      q:query
    },
    url: "/invoice/inventory_invoices/append_lots",
  })
})

function validate_inventory_invoices_form() {
  if ($('#invoice_inventory_invoice_payer_master_id').val() == "") {
    $('#invoice_inventory_invoice_contact_group_id').val("")
  }

  if ($('#invoice_inventory_invoice_insurer_id').val() == "") {
    $('#invoice_inventory_invoice_insurer_group_id').val("")
  }

  $("#inventory_invoices_form").validate({
    rules: {
      "invoice_inventory_invoice[mode_of_payment]": {
        required: true,
      },
      "invoice_inventory_invoice[total]": {
        required: true,
        number: true,
      },
      "invoice_inventory_invoice[additional_discount]": {
        number: true,
        min: 0,
      },
      // "invoice_inventory_invoice[advance_payment]": {
      //   number: true,
      //   min: 1,
      // },
      "invoice_inventory_invoice[amount_remaining]": {
        number: true,
        min: 0,
      },
      "invoice_inventory_invoice[net_amount]": {
        number: true,
        min: 0,
      },
    },
    messages: {
      "invoice_inventory_invoice[amount_remaining]": {
        number: "Enter advance amount",
        min: "Advance cannot be more than net amount"
      },
      "invoice_inventory_invoice[net_amount]": {
        number: "Required",
        min: "Advance cannot be more than net amount"
      },
      // "invoice_inventory_invoice[advance_payment]": {
      //   number: "Required",
      //   min: "Enter value more than 0 or select Full Payment"
      // },
    },
    errorPlacement: function (error, element) {
      var id = $(element).attr("id");
      var parent = $("#"+id).parents(".input-group").length
      if(parent == 0){
        error.insertAfter(element);
      } else {
        error.insertAfter($("#"+id).parents(".input-group"));
      }
    }
  });
}
validate_inventory_invoices_form()

$.validator.addMethod("PaymentReceived", function(value, element) {
  if ($('#delivery_pending').prop('checked')) {
    if ($('#fullpaymentform').prop('checked')) {
      return parseFloat($("#grand_total_inc_discount").val()) == parseFloat($("#invoice_total_payment").val());
    } else if ($('#advancepaymentform').prop('checked')) {
      return parseFloat($("#invoice_total_payment").val()) == parseFloat($('#invoice_inventory_invoice_advance_payment').val())
    }
  } else {
    return parseFloat($("#grand_total_inc_discount").val()) == parseFloat($("#invoice_total_payment").val());
  }
}, "Review Payment Details");

$.validator.addMethod("Number", $.validator.methods.digits, "Quantity Should be Number");
$.validator.addMethod("checkQuantity", function(value, element, options) {
  var id = $(element).attr("id")
  var item_quantity = $('#'+id).val()
  var item_max_quantity = $('#'+id).siblings(".item_max_quantity").val()
  if (!item_max_quantity) {
    return true
  }
  else{
    return this.optional(element) || parseInt(item_quantity) <= parseInt(item_max_quantity);
  }
}, "Cannot Checkout more than stock");

$.validator.addMethod("ModeOfPayment", function(value, element) {
  var mop = $(element).val()
  var amount = $(element).closest(".payment_received_row").find(".payment_received_breakups_amount").val()
  var invoice_type = $('.invoice_type:checked').val()
  if(mop != ""){
    return true
  } else if((parseFloat(amount) > 0) && (mop == "")) {
    return false
  } else if ((mop == "") && (invoice_type == 'cash')) {
    return false
  } else {
    return true
  }
}, "MOP Required");

$.validator.addMethod("PaymentBreakup", function(value, element) {
  var amount = $(element).val()
  var invoice_type = $('.invoice_type:checked').val()
  if (invoice_type == 'cash')
  {

    if (parseFloat(amount) < 0) {
      return false
    } else if (amount == "") {
      return false
    } else {
      return true
    }
  }
  else
  {
    return true
  }
}, "");

$.validator.addMethod("CreditPaymentOption", function(value, element) {
  var amount = parseFloat($(element).val()) || 0
  var invoice_type = $('.invoice_type:checked').val()
  if ((amount <= 0) && (invoice_type == 'credit')) {
    return false
  } else {
    return true
  }
}, "Amount cant be zero if Credit is selected.");

$.validator.addMethod("CreditPaymentBreakup", function(value, element) {
  var amount = parseFloat($(element).val()) || 0
  var payer = $(element).closest('.payment_pending_row').find('.payment_pending_breakups_received_from').val()
  if ((amount > 0) && (payer == '') ) {
    return false
  } else {
    return true
  }
}, "Payer Required.");

$.validator.addMethod("pendingAdvanceMOP", function(value, element) {
  amount = parseFloat($('.invoice_pending_advance_amount').val()) || 0
  mop = $(element).val().length
  reason = $('.invoice_pending_advance_reason').val().length
  if ( ( amount > 0 || reason > 0 ) && (mop == 0) ) {
    return false
  } else {
    return true
  }
}, "MOP Required");


$.validator.addMethod("pendingAdvanceReason", function(value, element) {
  amount = parseFloat($('.invoice_pending_advance_amount').val()) || 0
  mop = $('.invoice_pending_advances_mode_of_payment').val().length
  reason = $(element).val().length

  if ( ((amount > 0) || mop > 0 ) && (reason == 0)) {
    return false
  } else {
    return true
  }
}, "Reason Required");

$.validator.addMethod("pendingAdvanceAmount", function(value, element) {
  amount = parseFloat($(element).val()) || 0
  mop = $('.invoice_pending_advances_mode_of_payment').val().length
  reason = $('.invoice_pending_advance_reason').val().length
  net_amount = parseFloat($('#grand_total_inc_discount').val()) || 0

  if ( (mop > 0 || reason > 0) && (amount == 0) ) {
    return false
  } else if (amount > net_amount) {
    return false
  } else {
    return true
  }
}, "");


$.validator.addMethod("pendingAdvanceBalance", function(value, element) {
  var amount = $('.invoice_pending_advance_amount').val()
  if (amount == "")
  {
    return true
  } else if ($('#pending_invoice_total_payment_remaining').val() < 0) {
    return false
  } else {
    return true
  }

},"Amount should be equal or more than zero");

$.validator.addClassRules("item_quantity", { number: true, checkQuantity: true, required: true, min: 1});
$.validator.addClassRules("invoice_total_payment", { PaymentReceived: true });
$.validator.addClassRules("payment_received_breakups_mode_of_payment", { ModeOfPayment: true });
$.validator.addClassRules("payment_received_breakups_amount", { PaymentBreakup: true });
$.validator.addClassRules("invoice_payment_pending", { CreditPaymentOption: true });
$.validator.addClassRules("payment_pending_breakups_amount", { CreditPaymentBreakup: true });
$.validator.addClassRules("invoice_pending_advance_amount", { pendingAdvanceAmount: true });
$.validator.addClassRules("invoice_pending_advances_mode_of_payment", { pendingAdvanceMOP: true });
$.validator.addClassRules("invoice_total_payment_remaining", { pendingAdvanceBalance: true });
$.validator.addClassRules("invoice_pending_advance_reason", { pendingAdvanceReason: true });


jQuery.extend(jQuery.validator.messages, {
  required: "Required",
  remote: "Please fix this field.",
  email: "Please enter a valid email address.",
  url: "Please enter a valid URL.",
  date: "Please enter a valid date.",
  dateISO: "Invalid date.",
  number: "Invalid No.",
  digits: "Please enter only digits.",
  creditcard: "Please enter a valid credit card number.",
  equalTo: "Please enter the same value again.",
  accept: "Please enter a value with a valid extension.",
  maxlength: jQuery.validator.format("Please enter no more than {0} characters."),
  minlength: jQuery.validator.format("Please enter at least {0} characters."),
  rangelength: jQuery.validator.format("Please enter a value between {0} and {1} characters long."),
  range: jQuery.validator.format("Please enter a value between {0} and {1}."),
  max: jQuery.validator.format("Please enter a value less than or equal to {0}."),
  min: jQuery.validator.format("Please enter a value greater than or equal to {0}.")
});

