<% if false %>
  jQuery("#insurance-modal").html("<%= escape_javascript(render 'new_template') %>")
  jQuery("#insurance-modal").modal("show")
  <%= render 'invoices/invoice_ipd_calculations' %>

  function ins_invoice_template_page() {
    $("#new_invoice_ipd").validate({
      rules: {
        "invoice_ipd[mode_of_payment]": {
          required: true,
        },
        "invoice_ipd[cash]": {
          required: true,
          number: true
        },
        "invoice_ipd[card]": {
          required: true,
        }
      },
      messages: {
        "invoice_ipd[mode_of_payment]": {
          required: "Please select Mode of Payment."
        },
        "invoice_ipd[cash]": {
          required: "Cash Amount Cannot Be Empty",
        },
        "invoice_ipd[card]": {
          required: "Card Amount Cannot Be Empty"
        }
      },
      errorPlacement: function (error, element) {
          var name = $(element).attr("name");
          var $obj = $("#mop_validate");
          if(name == "invoice_ipd[mode_of_payment]"){
            error.appendTo($obj);
          } else if(name == "invoice_ipd[cash]" || name == "invoice_ipd[card]") {
            error.appendTo($("#cash_card_error"));
          } else {
            error.insertAfter(element);
          }
      }
    });

  }
  ins_invoice_template_page()

  $.validator.addMethod("ServiceName", $.validator.methods.required,
    "Service Name cannot be blank");

  $.validator.addMethod("ServiceTotal", $.validator.methods.number,
    "Amount Should be Number");

  $.validator.addMethod("ServiceTotalPresence", $.validator.methods.required,
    "Amount cannot be blank");

  $.validator.addMethod("ItemDescription", $.validator.methods.required,
    "Description cannot be blank");

  $.validator.addMethod("ItemQuantity", $.validator.methods.number,
    "Quantity Should be Number");

  $.validator.addMethod("ItemQuantityPresence", $.validator.methods.required,
    "Quantity cannot be blank");

  $.validator.addMethod("ItemUnitPrice", $.validator.methods.number,
    "Unit Price Should be Number");

  $.validator.addMethod("ItemUnitPricePresence", $.validator.methods.required,
    "Unit Price cannot be blank");

  $.validator.addClassRules("service_name", { ServiceName: true});
  $.validator.addClassRules("service_total", { ServiceTotal: true, ServiceTotalPresence: true});
  $.validator.addClassRules("i_description", { ItemDescription: true});
  $.validator.addClassRules("i_quantity", { ItemQuantity: true, ItemQuantityPresence: true});
  $.validator.addClassRules("i_unit_price", { ItemUnitPrice: true, ItemUnitPricePresence: true});


  $.validator.addMethod("INumber", $.validator.methods.number,
      "Please enter a number");

  $.validator.addMethod("cashandcardTotal", function(value, element) {
    return this.optional(element) || parseFloat($(".invoice_net_total").val()) == parseFloat($(".cash_payment").val()) + parseFloat($(".card_payment").val());
  }, "Sum of cash & card must be equal to total amount.");

  $.validator.addClassRules("card_payment", { cashandcardTotal: true, required: true, INumber:true});
  $.validator.addClassRules("cash_payment", { required: true, INumber:true});
<% end %>