// Validations for UserTimeSlot
function validateTimeSlots() {
  let formId = '<%= params[:action] %>' == 'edit'
    ? '#edit_user_time_slot_<%= @user_time_slot.id.to_s %>'
    : '#new_user_time_slot'
  $(formId).validate({
    rules: {
      "user_time_slot[calendar_duration]": {
        required: true,
      }
    },
    messages: {
      "user_time_slot[calendar_duration]": {
        required: '*Required',
      }
    },
    errorPlacement: function (error, element) {
      if ($(element).hasClass('sessions_ckbox_days') || $(element).hasClass('exception_sessions_ckbox_days')) {
        let row = $(element).closest('.row')
        $(row).prepend(`<div class="col-md-12 ckbox-error"></div>`)
        $(row).find('.ckbox-error').append(error)
      } else {
        error.insertAfter(element);
      }
    },
    ignore:"ui-tabs-hide"
  });

  if (!($(formId).valid())) {
    const tabName = $('#TimeSlotWizard').find("input.error:first").closest(".tab-pane").attr("id")
    $(`a[href="#${tabName}"]`).click();
  }
};
// validateTimeSlots();

// Generate BSON Like ObjectId
// TODO: Move it someplace better
const ObjectId = (m = Math, d = Date, h = 16, s = s => m.floor(s).toString(h)) =>
    s(d.now() / 1000) + ' '.repeat(h).replace(/./g, () => s(m.random() * h))

// Session JS
<%= render partial: 'time_slots/sessions/form.js.erb' %>

// Exception Session JS
<%= render partial: 'time_slots/exception_sessions/form.js.erb' %>
