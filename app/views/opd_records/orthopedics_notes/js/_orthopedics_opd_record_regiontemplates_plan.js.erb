function build_procedureside_from_array_and_populate(array, fieldname) {
    var proceduresideoptions = [];
    if (array.length > 0) {
        proceduresideoptions[0] = jQuery("<option value=\"\"></option>");
    } else {
        proceduresideoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-side=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
    }
    jQuery.each(array, function(index, object) {
        var proceduresideoption;
        proceduresideoption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-side=" + "\"" + object.side + "\"" + ">" + object.label + "</option>");
        proceduresideoptions[index + 1] = proceduresideoption;
    });
    jQuery("#"+fieldname).empty();
    jQuery("#"+fieldname).empty().append(proceduresideoptions);
}

function build_subqualifiers_from_array_and_populate(array, fieldname) {
    var proceduresubqualifiersoptions = [];
    if (array.length > 0) {
        proceduresubqualifiersoptions[0] = jQuery("<option value=\"\"></option>");
    } else {
        proceduresubqualifiersoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-proceduresubqualifier=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
    }
    jQuery.each(array, function(index, object) {
        var proceduresubqualifieroption;
        proceduresubqualifieroption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-proceduresubqualifier=" + "\"" + object.side + "\"" + ">" + object.label + "</option>");
        proceduresubqualifiersoptions[index + 1] = proceduresubqualifieroption;
    });
    jQuery("#"+fieldname).empty();
    jQuery("#"+fieldname).empty().append(proceduresubqualifiersoptions);
}

function build_procedureapproach_from_array_and_populate(array, fieldname) {
    var procedureapproachoptions = [];
    jQuery.each(array, function(index, object) {
        var procedureapproachoption;
        procedureapproachoption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-approach=" + "\"" + object.approach + "\"" + ">" + object.label + "</option>");
        procedureapproachoptions[index + 1] = procedureapproachoption;
    });
    jQuery("#"+fieldname).empty();
    jQuery("#"+fieldname).empty().append(procedureapproachoptions);
}

function build_procedures_from_array_and_populate(array, fieldname) {
    var proceduretypeoptions = [];
    if (array.length > 0) {
        proceduretypeoptions[0] = jQuery("<option value=\"\"></option>");
    } else {
        proceduretypeoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-proceduretype=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
    }
    jQuery.each(array, function(index, object) {
        var proceduretypeoption;
        proceduretypeoption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-proceduretype=" + "\"" + object.proceduretype + "\"" + ">" + object.label + "</option>");
        proceduretypeoptions[index + 1] = proceduretypeoption;
    });
    jQuery("#"+fieldname).empty();
    jQuery("#"+fieldname).empty().append(proceduretypeoptions);
}

function populate_side_approach_procedures_subqualifiers(data, config) {
    var selected_procedure_no_fieldname = config['selected_procedure_no_fieldname'];
    var proceduresidefieldname = config['procedureside'];
    var procedureapproachfieldname = config['procedureapproach'];
    var proceduretypefieldname = config['proceduretype'];
    var proceduresubqualifierfieldname = config['proceduresubqualifier'];
    var proceduresidefieldnamewithid = selected_procedure_no_fieldname + proceduresidefieldname;
    var procedureapproachfieldnamewithid = selected_procedure_no_fieldname + procedureapproachfieldname;
    var proceduretypefieldnamewithid = selected_procedure_no_fieldname + proceduretypefieldname;
    var proceduresubqualifierfieldnamewithid = selected_procedure_no_fieldname + proceduresubqualifierfieldname;
    var proceduresidearray = data['proceduredata']['side'];
    var procedureapproacharray = data['proceduredata']['approach'];
    var proceduretypearray = data['proceduredata']['procedures'];
    var proceduresubqualifiersarray = data['proceduredata']['proceduresubqualifiers'];
    build_procedureside_from_array_and_populate(proceduresidearray, proceduresidefieldnamewithid);
    build_procedureapproach_from_array_and_populate(procedureapproacharray, procedureapproachfieldnamewithid);
    build_procedures_from_array_and_populate(proceduretypearray, proceduretypefieldnamewithid);
    build_subqualifiers_from_array_and_populate(proceduresubqualifiersarray, proceduresubqualifierfieldnamewithid);
}

function populate_side_approach_procedures(data, config) {
    var selected_procedure_no_fieldname = config['selected_procedure_no_fieldname'];
    var proceduresidefieldname = config['procedureside'];
    var procedureapproachfieldname = config['procedureapproach'];
    var proceduretypefieldname = config['proceduretype'];
    var proceduresidefieldnamewithid = selected_procedure_no_fieldname + proceduresidefieldname;
    var procedureapproachfieldnamewithid = selected_procedure_no_fieldname + procedureapproachfieldname;
    var proceduretypefieldnamewithid = selected_procedure_no_fieldname + proceduretypefieldname;
    var proceduresidearray = data['proceduredata']['side'];
    var procedureapproacharray = data['proceduredata']['approach'];
    var proceduretypearray = data['proceduredata']['procedures'];
    build_procedureside_from_array_and_populate(proceduresidearray, proceduresidefieldnamewithid);
    build_procedureapproach_from_array_and_populate(procedureapproacharray, procedureapproachfieldnamewithid);
    build_procedures_from_array_and_populate(proceduretypearray, proceduretypefieldnamewithid);
}

function _populate_procedurename(array, config) {
    var selected_procedure_no_fieldname = config['selected_procedure_no_fieldname'];
    var procedurenamefieldname = config['fieldname'];
    var procedurequalifierfieldname = config['fieldnamequalifier'];
    var procedurenamefieldnamewithid = selected_procedure_no_fieldname + procedurenamefieldname;
    var procedurequalifierfieldnamewithid = selected_procedure_no_fieldname + procedurequalifierfieldname;
    var procedurenameoptions = [];
    if (array.length > 0) {
        procedurenameoptions[0] = jQuery("<option value=\"\"></option>");
    } else {
        procedurenameoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-procedurename=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
    }
    jQuery.each(array, function(index, values) {
        var procedurenameoption;
        procedurenameoption = jQuery("<option value=" + "\"" + values[1] + "\"" + " data-procedurename=" + "\"" + values[2] + "\"" + ">" + values[0] + "</option>");
        procedurenameoptions[index + 1] = procedurenameoption;
    });
    jQuery("#"+procedurequalifierfieldnamewithid).empty();
    jQuery("#"+procedurenamefieldnamewithid).empty().append(procedurenameoptions);
}

function _populate_procedurequalifier(array, config) {
    var selected_procedure_no_fieldname = config['selected_procedurename_no_fieldname'];
    var procedurequalifierfieldname = config['fieldname'];
    var procedurenamefieldname = config['fieldnamesubtype'];
    var procedurequalifierfieldnamewithid = selected_procedure_no_fieldname + procedurequalifierfieldname;
    var procedurenamefieldnamewithid = selected_procedure_no_fieldname + procedurenamefieldname;
    var procedurequalifieroptions = [];
    if (array.length > 0) {
        procedurequalifieroptions[0] = jQuery("<option value=\"\"></option>");
    } else {
        procedurequalifieroptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-procedurequalifier=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
    }
    jQuery.each(array, function(index, values) {
        var procedurequalifieroption;
        procedurequalifieroption = jQuery("<option value=" + "\"" + values[1] + "\"" + " data-procedurequalifier=" + "\"" + values[2] + "\"" + ">" + values[0] + "</option>");
        procedurequalifieroptions[index + 1] = procedurequalifieroption;
    });
    jQuery("#"+procedurequalifierfieldnamewithid).empty().append(procedurequalifieroptions);
}

function _medication_frequencies_options(array) {
    var medicationfrequencies = [];
    medicationfrequencies[0] = jQuery("<option value=\" \"></option>");
    jQuery.each(array, function(index, value) {
        var medicationfrequencyoption;
        medicationfrequencyoption = jQuery("<option value=" + "\"" + value + "\"" + ">" + value + "</option>");
        medicationfrequencies[index + 1] = medicationfrequencyoption;
    });
    return medicationfrequencies;
}

function _medication_quantities_options(array) {
    var medicationquantities = [];
    jQuery.each(array, function(index, value) {
        var medicationquantityoption;
        if (value == "1") {
            medicationquantityoption = jQuery("<option value=" + "\"" + value + "\"" + " selected=" + "\"" + "true" + "\"" + ">" + value + "</option>");
        } else {
            medicationquantityoption = jQuery("<option value=" + "\"" + value + "\"" + ">" + value + "</option>");
        }
        medicationquantities[index + 1] = medicationquantityoption;
    });
    return medicationquantities;
}

function _medication_instructions_options(array) {
    var medicationinstructions = [];
    medicationinstructions[0] = jQuery("<option value=\" \"></option>");
    jQuery.each(array, function(index, value) {
        var medicationinstructionoption;
        medicationinstructionoption = jQuery("<option value=" + "\"" + value + "\"" + ">" + value + "</option>");
        medicationinstructions[index + 1] = medicationinstructionoption;
    });
    return medicationinstructions;
}

jQuery(document).ready(function() {

    jQuery('#opdrecord_medicationsets').on('click', function() {
      if (this.value != undefined && this.value != "" ) {
        var params = {medicationkitid: this.value};
        _jquery_ajax_get_params_no_data_return("/opd_records/fill_medication_data", params);
      }
    });

    

    jQuery('.medication-table-body-added').on('click', "a[name*='removemedicationbutton']", function() {
      event.preventDefault();
      var medications_removed_tr_html;
      var fieldcounter;
      fieldcounter = jQuery(this).attr('id').slice(-1);
      if(jQuery('#tbody_ortho_medication tr').length == 1) {
        $('#removemedicationbutton0').prop('disabled', true);
      } else {
        $('#removemedicationbutton0').prop('disabled', false);
        var medications_tr_array = jQuery(this).parents('.treatmentmedications').find(".id");
        if (medications_tr_array.length > 0) {
          jQuery(this).parents('.treatmentmedications').find("input[name*='_destroy']").val("1");
          medications_removed_tr_html = jQuery(this).parents('.treatmentmedications').wrap('<p/>').parent().html();
          jQuery(this).parents('.treatmentmedications').unwrap();
          jQuery('.medication-table-body-removed').append(medications_removed_tr_html);
          jQuery(this).parents('.treatmentmedications').remove();
          _renumber_id_after_remove("tbody.medication-table-body-added", "div.medication-table-body-removed");
        } else {
          jQuery(this).parents('.treatmentmedications').remove();
          _renumber_id_after_remove("tbody.medication-table-body-added", "div.medication-table-body-removed");
        }
        check_validation_status(
          jQuery('#tbody_ortho_medication'), 
          'medications_is_valid', 'advice_step_medication'
        );
      }
    });

    jQuery(".medicinename-contents").on("click", function(event) {
        event.preventDefault();
        jQuery(this).popover({
            placement : 'right',
            title : 'Contents',
            html : true,
            content :function(){
                jQuery.ajax({
                    type: "GET",
                    url: "/icdtree/show_medicinecontents",
                    data: {medicine_id: jQuery(this).attr("data-medicinecontents")},
                    beforeSend: function(xhr){
                        jQuery('.popover').popover('hide');
                    }
                }).done(function( data ) {
                    jQuery('.popover.in .popover-content').empty();
                    jQuery(".popover.in .popover-content").html(data);
                });
            },
            trigger : 'focus',
            template : '<div class="popover" role="tooltip" style="min-width: 370px"><div class="arrow"></div><button type="button" class="popover-close close" ><span class="glyphicon glyphicon-remove"></span></button><h5 class="popover-title"></h5><div class="popover-content"></div></div>'
        });
        jQuery(this).popover('toggle');

    });

    jQuery('.fuelux').on('click','.popover-close',function() {
        jQuery(".popover").popover('hide');
    });

    jQuery("input[name='opdrecord[advice_attributes][immobilization]']").on('change', function() {
        if (this.value == "Yes") {
            jQuery('.castorsplint-label').show();
            jQuery('.radio_castorsplint').show();
        }
        else if (this.value == "No") {
            jQuery('.radio_cast').hide();
            jQuery('.radio_splint').hide();
            jQuery('.castorsplint-label').hide();
            jQuery('.radio_castorsplint').hide();
            if (jQuery("input[name='opdrecord[advice_attributes][castorsplint]']").val() != null) {
                jQuery("input[name='opdrecord[advice_attributes][castorsplint]']").val("");
                jQuery("button[name='castorsplint']").removeClass('active');
            }
        }
    });

    jQuery(".opdrecord_procedureregion").on("change", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var selected_procedurefilename = jQuery('option:selected', this).attr('data-procedurefilename');
        var selected_procedureregionid = jQuery('option:selected', this).attr('data-regionid');
        var procedurelist_procedureregiontext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregiontext");
        var procedurelist_procedureregionfilenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregionfilename");
        jQuery("#"+procedurelist_procedureregiontext_id).val(selected_procedureregionid);
        jQuery("#"+procedurelist_procedureregionfilenametext_id).val(selected_procedurefilename);

        var params = { regionid: selected_procedureregionid, templatetype: selected_procedurefilename };
        var proceduretype_config = { selected_procedure_no_fieldname: _remove_fieldname_from_id( jQuery(this).attr('id') ), procedureside: "procedureside", procedureapproach: "procedureapproach", proceduretype: "proceduretype", proceduresubqualifier: "proceduresubqualifier" };
        _jquery_ajax_get_params_config("/opd_records/populate_side_approach_procedures.json", params, "populate_side_approach_procedures_subqualifiers", proceduretype_config);
    });

    jQuery("#procedure").on("click", ".opdrecord_proceduretype1", function() {
        var regioncounter; //regioncounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        regioncounter = jQuery(this).attr('data-proceduretypecounter');

        var fieldcounter;
        /*if (jQuery("tr.procedurelist").length == 0){
            fieldcounter = 0;
        } else {
            fieldcounter = jQuery("tr.procedurelist").length;
        }*/
        if (jQuery(".procedurelist-tbody-added > .procedurelist").length == 0){
            fieldcounter = 0;
        } else {
            fieldcounter = jQuery(".procedurelist-tbody-added > .procedurelist").length;
        }

        var clicked_proceduretype_input_value = jQuery(this).attr('data-proceduretype');
        var clicked_proceduretype_input_array = clicked_proceduretype_input_value.split("###");
        var selected_proceduretype = clicked_proceduretype_input_array[0];
        var selected_proceduretypeid = clicked_proceduretype_input_array[1];

        var proceduretype_procedureregionnametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, regioncounter, "procedureregionnametext");
        var selected_proceduretype = selected_proceduretypeid;

        var params = { counter: fieldcounter, specalityfoldername: "<%= @speciality_folder_name %>", templatetype: "<%= @templatetype %>", proceduretype: selected_proceduretype, regionname: jQuery("#"+proceduretype_procedureregionnametext_id).val() };
        jQuery.ajax({
            type: "GET",
            dataType: "script",
            url: "/opd_records/add_procedurelist",
            data: {ajax: params, remote: "true" },
            async: false
        });

        _renumber_id_after_remove("tbody.procedurelist-tbody-added", "div.procedurelist-tbody-removed");

        return false;
    });

    jQuery(".opdrecord_proceduretype").on("change", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var procedurelist_procedureregionfilenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregionfilename");
        var selected_proceduretype = jQuery('option:selected', this).attr('data-proceduretype');
        var procedurelist_proceduretypetext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "proceduretypetext");
        jQuery("#"+procedurelist_proceduretypetext_id).val(selected_proceduretype);
        var templatetype = jQuery('#opdrecord_templatetype').val();
        var params = { proceduretype: selected_proceduretype, templatetype: templatetype, regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val(), speciality_id: "<%= @specalityid %>" };
        var proceduretype_config = { selected_procedure_no_fieldname: _remove_fieldname_from_id( jQuery(this).attr('id') ), fieldname: "procedurename", fieldnamequalifier: "procedurequalifier", regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val() };
        _jquery_ajax_get_params_config("/opd_records/populate_procedurename.json", params, "_populate_procedurename", proceduretype_config);
    });

    jQuery("#procedure").on("change", ".opdrecord_procedurename", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var procedurelist_procedureregionfilenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregionfilename");
        var selected_procedurename = jQuery('option:selected', this).attr('data-procedurename');
        var procedurelist_procedurenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedurenametext");
        jQuery("#"+procedurelist_procedurenametext_id).val(selected_procedurename);
        var templatetype = jQuery('#opdrecord_templatetype').val();
        var params = { procedurename: selected_procedurename, templatetype: templatetype, regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val(), speciality_id: "<%= @specalityid %>" };
        var procedurename_config = { selected_procedurename_no_fieldname: _remove_fieldname_from_id( jQuery(this).attr('id') ), fieldname: "procedurequalifier", fieldnamesubtype: "procedurename", regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val() };
        _jquery_ajax_get_params_config("/opd_records/populate_procedurequalifier.json", params, "_populate_procedurequalifier", procedurename_config);
    });

    jQuery("#procedure").on("change", ".opdrecord_procedureside", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var selected_procedureside = jQuery('option:selected', this).attr('data-side');
        var procedurelist_proceduresidetext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "proceduresidetext");
        jQuery("#"+procedurelist_proceduresidetext_id).val(selected_procedureside);
    });
    jQuery("#procedure").on("change", ".opdrecord_procedurestatus", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var selected_procedurestatus = jQuery('option:selected', this).attr('data-status');
        var procedurelist_procedurestatus_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedurestatustext");
        jQuery("#"+procedurelist_procedurestatus_id).val(selected_procedurestatus);
    });
    jQuery("#procedure").on("change", ".opdrecord_procedureapproach", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var selected_procedureapproach = jQuery('option:selected', this).attr('data-approach');
        var procedurelist_procedureapproach_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureapproachtext");
        jQuery("#"+procedurelist_procedureapproach_id).val(selected_procedureapproach);
    });
    jQuery("#procedure").on("change", ".opdrecord_procedurequalifier", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var selected_procedurequalifier = jQuery('option:selected', this).attr('data-procedurequalifier');
        var procedurelist_procedurequalifiertext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedurequalifiertext");
        jQuery("#"+procedurelist_procedurequalifiertext_id).val(selected_procedurequalifier);
    });
    jQuery("#procedure").on("change", ".opdrecord_proceduresubqualifier", function() {
        var fieldcounter;
        fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
        var selected_proceduresubqualifier = jQuery('option:selected', this).attr('data-proceduresubqualifier');
        var procedurelist_proceduresubqualifiertext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "proceduresubqualifiertext");
        jQuery("#"+procedurelist_proceduresubqualifiertext_id).val(selected_proceduresubqualifier);
    });

    jQuery("input[name='opdrecord[advice_attributes][castorsplint]']").on('change', function() {
        if (this.value == "Cast") {
            jQuery('.radio_cast').show();
            jQuery('.radio_splint').hide();
        }
        else if (this.value == "Splint") {
            jQuery('.radio_splint').show();
            jQuery('.radio_cast').hide();
        }
    });

    jQuery("input[name='opdrecord[advice_attributes][refertophysiotherpist]']").on('change', function() {
        if (this.value == "Yes") {
            jQuery('.physiotherapyadvice-checkbox').show();
            jQuery('.checkbox_physiotherapyadvice').show();
            jQuery('.physiotherapyadvicecommentbox-textarealabel').show();
            jQuery('#opdrecord_physiotherapyadvicecommentbox').show();
        }
        else if (this.value == "No") {
            jQuery('.physiotherapyadvice-checkbox').hide();
            jQuery('.checkbox_physiotherapyadvice').hide();
            jQuery('.physiotherapyadvicecommentbox-textarealabel').hide();
            jQuery('#opdrecord_physiotherapyadvicecommentbox').hide();
            if (jQuery("input[name='opdrecord[advice_attributes][physiotherapyadvice]']").val() != null) {
                jQuery("input[name='opdrecord[advice_attributes][physiotherapyadvice]']").val("");
                jQuery("button[name='physiotherapyadvice']").removeClass('active');
            }
        }
    });

    jQuery("input[name='opdrecord[advice_attributes][otherprecautions]']").on('change', function() {
        if (this.value == "Yes") {
            jQuery('.otherprecautionscommentbox-textarealabel').show();
            jQuery('#opdrecord_otherprecautionscommentbox').show();
        }
        else if (this.value == "No") {
            jQuery('.otherprecautionscommentbox-textarealabel').hide();
            jQuery('#opdrecord_otherprecautionscommentbox').hide();
        }
    });

    jQuery("input[name='opdrecord[advice_attributes][otherreference]']").on('change', function() {
        if (this.value == "Yes") {
            jQuery('.otherreferencecommentbox-textarealabel').show();
            jQuery('#opdrecord_otherreferencecommentbox').show();
        }
        else if (this.value == "No") {
            jQuery('.otherreferencecommentbox-textarealabel').hide();
            jQuery('#opdrecord_otherreferencecommentbox').hide();
        }
    });

    jQuery('.procedurelist-tbody-added').on('click', "a[name*='removeprocedurebutton']", function() {
        event.preventDefault();
        var procedurelist_removed_tr_html;
        var fieldcounter;
        fieldcounter = jQuery(this).attr('id').slice(-1);
        var procedurelist_tr_array = jQuery(this).parents('.procedurelist').find(".id");
        if (procedurelist_tr_array.length > 0) {
            jQuery(this).parents('.procedurelist').find("input[name*='_destroy']").val("1");
            procedurelist_removed_tr_html = jQuery(this).parents('.procedurelist').wrap('<p/>').parent().html();
            jQuery(this).parents('.procedurelist').unwrap();
            jQuery('.procedurelist-tbody-removed').append(procedurelist_removed_tr_html);
            jQuery(this).parents('.procedurelist').remove();
            _renumber_id_after_remove("tbody.procedurelist-tbody-added", "div.procedurelist-tbody-removed");
        } else {
            jQuery(this).parents('.procedurelist').remove();
            _renumber_id_after_remove("tbody.procedurelist-tbody-added", "div.procedurelist-tbody-removed");
        }
    });

});

var datepicker_options = {
  dateFormat: "dd/mm/yy",
  minDate: 0
};
$('.opdfollowupdate-datepicker').datepicker(datepicker_options);

$('#opdfollowupdate-datepicker').on('change', function(){
  var getdate = $("#opdfollowupdate-datepicker").datepicker("getDate");
  timepicker_changed()
  check_validation_status(
    this, 'followup_is_valid',
    'advice_step_advice', true,
    'opdrecord_opdfollowuptimeframe'
  );
});

$('.opdfollowupdate-datepicker').on('change', function(){
  $('#bookappointment').prop('checked','true')
})

$(".opdfollowuptime-timepicker").on('change', function(){
  timepicker_changed()
}).trigger('change')


function timepicker_changed() {
  var timestamp = $("#opdfollowupdate-datepicker").val() + " " + $(".opdfollowuptime-timepicker").val()
  $(".hidden_followup_timepicker").attr("value", timestamp)
}

function toggle_specialty_dropdown(){
  if($('.advice_appointment_specialty_id').find('option').length === 1){
    $(".specialty_dropdown_div").hide();
  } else {
    $(".specialty_dropdown_div").show();
  }
}
toggle_specialty_dropdown();

function get_booked_appointments(doctor_id, facility_id, specialty_id, date, flag) {
  $.ajax({
    url: '/opd_appointments/get_booked_appointments',
    type: 'get',
    data: {
      doctor_id: doctor_id,
      date: date,
      facility_id: facility_id,
      specialty_id: specialty_id,
      flag: flag
    },
    success: function(res) {
    },
  });
}

$('.opdfollowupdate-datepicker').change(function(){
  date = this.value
  doctor_id = $('#opdrecord_advice_attributes_appointment_doctor').val()
  facility_id = $('#opdrecord_advice_attributes_appointment_facility').val()
  specialty_id = $('.advice_appointment_specialty_id').val()

  get_booked_appointments(doctor_id, facility_id, specialty_id, date, "dateselect")

  if (!$("input[id^='opdrecord_advice_attributes_appointment_type_id_']").is(':checked')){
    $('#opdrecord_advice_attributes_appointment_doctor').trigger("change")
  }
})

$('#opdrecord_advice_attributes_appointment_facility').on("change",function(){
  var facility_id = this.value;
  let doctor_id = $('#opdrecord_advice_attributes_appointment_doctor').val();
  let department_id = '485396012';

  get_facility_specialties(facility_id)
  check_time_slots(doctor_id, facility_id, department_id)
});

$('.advice_appointment_specialty_id').on("change", function(){
  var specialty_id = this.value
  var facility_id = $("#opdrecord_advice_attributes_appointment_facility").val();
  var doctor_id = $('#opdrecord_advice_attributes_appointment_doctor').val()
  var date = $('.opdfollowupdate-datepicker').val()

  // get_doctors_app_types(facility_id, specialty_id)
  get_booked_appointments(doctor_id, facility_id, specialty_id, date, "dateselect")
})

$('#opdrecord_advice_attributes_appointment_doctor').on('change', function(e) {
  let doctor_id = $(this).val();
  let facility_id = $('#opdrecord_advice_attributes_appointment_facility').val();
  let department_id = '485396012'
  var date = $('.opdfollowupdate-datepicker').val()
  var specialty_id = $('.advice_appointment_specialty_id').val()
  get_booked_appointments(doctor_id, facility_id, specialty_id, date, "dateselect")
  check_time_slots(doctor_id, facility_id, department_id)
}).trigger('change');

function check_time_slots(doctor_id, facility_id, department_id){
  // Check TimeSlot
  $.ajax({
    type: 'GET',
    dataType: 'json',
    url: "/opd_appointments/user_time_slot_check",
    data: { doctor_id, facility_id, department_id },
    success: function(response) {
      if (response) {
        $('.opdfollowupdate-datepicker').datepicker('destroy');
        $('#opdfollowupdate-datepicker').removeClass('opdfollowupdate-datepicker').removeClass('hasDatepicker');
        $('.opd-followup-timepicker').html(`
          <div class="bootstrap-timepicker timepicker">
            <input type="text" name="opdfollowuptime" id="opdfollowuptime-timepicker" class="form-control full_width opdfollowuptime-timepicker" readonly="readonly" value='<%= @opdrecord.advice.try(:opdfollowuptime) ? @opdrecord.advice.try(:opdfollowuptime).strftime('%I:%M %p') : '' %>'>
          </div>
        `)
        if ('<%= params[:action] %>' ==  'new') {
          $('#opdfollowupdate-datepicker').val('');
          $('#opdrecord_advice_attributes_opdfollowuptime').val('');
        }
      } else {
        $('#opdfollowupdate-datepicker').addClass('opdfollowupdate-datepicker');
        // $("#opdfollowupdate-datepicker").attr("readonly", false); 
        $('.opdfollowupdate-datepicker').datepicker(datepicker_options);
        // $("#opdfollowuptime-timepicker").attr("readonly", false);
        $('.opdfollowuptime-timepicker').timepicker({minuteStep: 5}).trigger('change');
      }
    }
  });
}

$('#opdfollowupdate-datepicker').on('click', function() {
  if (!$(this).hasClass('opdfollowupdate-datepicker')) {
    opdCalendarModal();
  }
});

const opdCalendarModal = () => {
  var doctor_id = $('#opdrecord_advice_attributes_appointment_doctor').val();
  let facility_id = $('#opdrecord_advice_attributes_appointment_facility').val();
  let department_id = '485396012'

  $.ajax({
    type: 'GET',
    dataType: 'script',
    url: "/opd_appointments/calendar_time_slot",
    data: { doctor_id, facility_id, department_id },
    success: function(response) {
    }
  });
}
