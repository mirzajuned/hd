    function build_procedureside_from_array_and_populate(array, fieldname) {
        var proceduresideoptions = [];
        if (array.length > 0) {
            proceduresideoptions[0] = jQuery("<option value=\"\"></option>");
        } else {
            proceduresideoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-side=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
        }
        jQuery.each(array, function(index, object) {
            var proceduresideoption;
            proceduresideoption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-side=" + "\"" + object.side + "\"" + ">" + object.label + "</option>");
            proceduresideoptions[index + 1] = proceduresideoption;
        });
        jQuery("#"+fieldname).empty();
        jQuery("#"+fieldname).empty().append(proceduresideoptions);
    }

    function build_subqualifiers_from_array_and_populate(array, fieldname) {
        var proceduresubqualifiersoptions = [];
        if (array.length > 0) {
            proceduresubqualifiersoptions[0] = jQuery("<option value=\"\"></option>");
        } else {
            proceduresubqualifiersoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-proceduresubqualifier=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
        }
        jQuery.each(array, function(index, object) {
            var proceduresubqualifieroption;
            proceduresubqualifieroption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-proceduresubqualifier=" + "\"" + object.side + "\"" + ">" + object.label + "</option>");
            proceduresubqualifiersoptions[index + 1] = proceduresubqualifieroption;
        });
        jQuery("#"+fieldname).empty();
        jQuery("#"+fieldname).empty().append(proceduresubqualifiersoptions);
    }

    function build_procedureapproach_from_array_and_populate(array, fieldname) {
        var procedureapproachoptions = [];
        jQuery.each(array, function(index, object) {
            var procedureapproachoption;
            procedureapproachoption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-approach=" + "\"" + object.approach + "\"" + ">" + object.label + "</option>");
            procedureapproachoptions[index + 1] = procedureapproachoption;
        });
        jQuery("#"+fieldname).empty();
        jQuery("#"+fieldname).empty().append(procedureapproachoptions);
    }

    function build_procedures_from_array_and_populate(array, fieldname) {
        var proceduretypeoptions = [];
        if (array.length > 0) {
            proceduretypeoptions[0] = jQuery("<option value=\"\"></option>");
        } else {
            proceduretypeoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-proceduretype=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
        }
        jQuery.each(array, function(index, object) {
            var proceduretypeoption;
            proceduretypeoption = jQuery("<option value=" + "\"" + object.value + "\"" + " data-proceduretype=" + "\"" + object.proceduretype + "\"" + ">" + object.label + "</option>");
            proceduretypeoptions[index + 1] = proceduretypeoption;
        });
        jQuery("#"+fieldname).empty();
        jQuery("#"+fieldname).empty().append(proceduretypeoptions);
    }

    function populate_side_approach_procedures_subqualifiers(data, config) {
        var selected_procedure_no_fieldname = config['selected_procedure_no_fieldname'];
        var proceduresidefieldname = config['procedureside'];
        var procedureapproachfieldname = config['procedureapproach'];
        var proceduretypefieldname = config['proceduretype'];
        var proceduresubqualifierfieldname = config['proceduresubqualifier'];
        var proceduresidefieldnamewithid = selected_procedure_no_fieldname + proceduresidefieldname;
        var procedureapproachfieldnamewithid = selected_procedure_no_fieldname + procedureapproachfieldname;
        var proceduretypefieldnamewithid = selected_procedure_no_fieldname + proceduretypefieldname;
        var proceduresubqualifierfieldnamewithid = selected_procedure_no_fieldname + proceduresubqualifierfieldname;
        var proceduresidearray = data['proceduredata']['side'];
        var procedureapproacharray = data['proceduredata']['approach'];
        var proceduretypearray = data['proceduredata']['procedures'];
        var proceduresubqualifiersarray = data['proceduredata']['proceduresubqualifiers'];
        build_procedureside_from_array_and_populate(proceduresidearray, proceduresidefieldnamewithid);
        build_procedureapproach_from_array_and_populate(procedureapproacharray, procedureapproachfieldnamewithid);
        build_procedures_from_array_and_populate(proceduretypearray, proceduretypefieldnamewithid);
        build_subqualifiers_from_array_and_populate(proceduresubqualifiersarray, proceduresubqualifierfieldnamewithid);
    }

    function populate_side_approach_procedures(data, config) {
        var selected_procedure_no_fieldname = config['selected_procedure_no_fieldname'];
        var proceduresidefieldname = config['procedureside'];
        var procedureapproachfieldname = config['procedureapproach'];
        var proceduretypefieldname = config['proceduretype'];
        var proceduresidefieldnamewithid = selected_procedure_no_fieldname + proceduresidefieldname;
        var procedureapproachfieldnamewithid = selected_procedure_no_fieldname + procedureapproachfieldname;
        var proceduretypefieldnamewithid = selected_procedure_no_fieldname + proceduretypefieldname;
        var proceduresidearray = data['proceduredata']['side'];
        var procedureapproacharray = data['proceduredata']['approach'];
        var proceduretypearray = data['proceduredata']['procedures'];
        build_procedureside_from_array_and_populate(proceduresidearray, proceduresidefieldnamewithid);
        build_procedureapproach_from_array_and_populate(procedureapproacharray, procedureapproachfieldnamewithid);
        build_procedures_from_array_and_populate(proceduretypearray, proceduretypefieldnamewithid);
    }

    function _populate_procedurename(array, config) {
        var selected_procedure_no_fieldname = config['selected_procedure_no_fieldname'];
        var procedurenamefieldname = config['fieldname'];
        var procedurequalifierfieldname = config['fieldnamequalifier'];
        var procedurenamefieldnamewithid = selected_procedure_no_fieldname + procedurenamefieldname;
        var procedurequalifierfieldnamewithid = selected_procedure_no_fieldname + procedurequalifierfieldname;
        var procedurenameoptions = [];
        if (array.length > 0) {
            procedurenameoptions[0] = jQuery("<option value=\"\"></option>");
        } else {
            procedurenameoptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-procedurename=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
        }
        jQuery.each(array, function(index, values) {
            var procedurenameoption;
            procedurenameoption = jQuery("<option value=" + "\"" + values[1] + "\"" + " data-procedurename=" + "\"" + values[2] + "\"" + ">" + values[0] + "</option>");
            procedurenameoptions[index + 1] = procedurenameoption;
        });
        jQuery("#"+procedurequalifierfieldnamewithid).empty();
        jQuery("#"+procedurenamefieldnamewithid).empty().append(procedurenameoptions);
    }

    function _populate_procedurequalifier(array, config) {
        var selected_procedure_no_fieldname = config['selected_procedurename_no_fieldname'];
        var procedurequalifierfieldname = config['fieldname'];
        var procedurenamefieldname = config['fieldnamesubtype'];
        var procedurequalifierfieldnamewithid = selected_procedure_no_fieldname + procedurequalifierfieldname;
        var procedurenamefieldnamewithid = selected_procedure_no_fieldname + procedurenamefieldname;
        var procedurequalifieroptions = [];
        if (array.length > 0) {
            procedurequalifieroptions[0] = jQuery("<option value=\"\"></option>");
        } else {
            procedurequalifieroptions[0] = jQuery("<option value=" + "\"" + "NA" + "\"" + " data-procedurequalifier=" + "\"" + "na" + "\"" + ">" + "NA" + "</option>");
        }
        jQuery.each(array, function(index, values) {
            var procedurequalifieroption;
            procedurequalifieroption = jQuery("<option value=" + "\"" + values[1] + "\"" + " data-procedurequalifier=" + "\"" + values[2] + "\"" + ">" + values[0] + "</option>");
            procedurequalifieroptions[index + 1] = procedurequalifieroption;
        });
        jQuery("#"+procedurequalifierfieldnamewithid).empty().append(procedurequalifieroptions);
    }

    function _medication_frequencies_options(array) {
        var medicationfrequencies = [];
        medicationfrequencies[0] = jQuery("<option value=\" \"></option>");
        jQuery.each(array, function(index, value) {
            var medicationfrequencyoption;
            medicationfrequencyoption = jQuery("<option value=" + "\"" + value + "\"" + ">" + value + "</option>");
            medicationfrequencies[index + 1] = medicationfrequencyoption;
        });
        return medicationfrequencies;
    }

    function _medication_quantities_options(array) {
        var medicationquantities = [];
        jQuery.each(array, function(index, value) {
            var medicationquantityoption;
            if (value == "1") {
                medicationquantityoption = jQuery("<option value=" + "\"" + value + "\"" + " selected=" + "\"" + "true" + "\"" + ">" + value + "</option>");
            } else {
                medicationquantityoption = jQuery("<option value=" + "\"" + value + "\"" + ">" + value + "</option>");
            }
            medicationquantities[index + 1] = medicationquantityoption;
        });
        return medicationquantities;
    }

    function _medication_instructions_options(array) {
        var medicationinstructions = [];
        medicationinstructions[0] = jQuery("<option value=\" \"></option>");
        jQuery.each(array, function(index, value) {
            var medicationinstructionoption;
            medicationinstructionoption = jQuery("<option value=" + "\"" + value + "\"" + ">" + value + "</option>");
            medicationinstructions[index + 1] = medicationinstructionoption;
        });
        return medicationinstructions;
    }

jQuery(document).ready(function() {
    _add_button_at_last()
        jQuery('#opdrecord_medicationsets').on('click', function() {
            if (this.value != undefined && this.value != "" ) {
                var params = {medicationkitid: this.value};
                _jquery_ajax_get_params_no_data_return("/opd_records/fill_medication_data", params);
            }
        });

        jQuery('#opdrecord_medicationsets_tab').on('change', function() {
          if (this.value != undefined && this.value != "" ) {
            var params = {medicationkitid: this.value};
            _jquery_ajax_get_params_no_data_return("/opd_records/fill_medication_data", params);
             jQuery('#opdrecord_medicationsets_tab').val("")
          }
        });

        jQuery('tbody').on('click', "a[name*='addnewmedicationbutton']", function() {
        var fieldcounter;
        if (jQuery(".medication-table-body-added > .treatmentmedications").length == 0){
            fieldcounter = 0;
        } else {
            fieldcounter = jQuery(".medication-table-body-added > .treatmentmedications").length;
        }
        var params = { counter: fieldcounter };
        jQuery.ajax({
            type: "GET",
            dataType: "script",
            url: "/opd_records/add_medication",
            data: {ajax: params, remote: "true" },
            async: false
        });
        _renumber_id_after_remove("tbody.medication-table-body-added", "div.medication-table-body-removed");
        //medicinename_autocomplete();
    });

        jQuery('.medication-table-body-added').on('click', "a[name*='removemedicationbutton']", function() {
        event.preventDefault();
        var medications_removed_tr_html;
        var fieldcounter;
        fieldcounter = jQuery(this).attr('id').slice(-1);
        var medications_tr_array = jQuery(this).parents('.treatmentmedications').find(".id");
        if (medications_tr_array.length > 0) {
            jQuery(this).parents('.treatmentmedications').find("input[name*='_destroy']").val("1");
            medications_removed_tr_html = jQuery(this).parents('.treatmentmedications').wrap('<p/>').parent().html();
            jQuery(this).parents('.treatmentmedications').unwrap();
            jQuery('.medication-table-body-removed').append(medications_removed_tr_html);
            jQuery(this).parents('.treatmentmedications').remove();
            _renumber_id_after_remove("tbody.medication-table-body-added", "div.medication-table-body-removed");
        } else {
            jQuery(this).parents('.treatmentmedications').remove();
            _renumber_id_after_remove("tbody.medication-table-body-added", "div.medication-table-body-removed");
        }
    });



        jQuery(".medicinename-contents").on("click", function(event) {
            event.preventDefault();
            jQuery(this).popover({
                placement : 'right',
                title : 'Contents',
                html : true,
                content :function(){
                    jQuery.ajax({
                        type: "GET",
                        url: "/icdtree/show_medicinecontents",
                        data: {medicine_id: jQuery(this).attr("data-medicinecontents")},
                        beforeSend: function(xhr){
                            jQuery('.popover').popover('hide');
                        }
                    }).done(function( data ) {
                        jQuery('.popover.in .popover-content').empty();
                        jQuery(".popover.in .popover-content").html(data);
                    });
                },
                trigger : 'focus',
                template : '<div class="popover" role="tooltip" style="min-width: 370px"><div class="arrow"></div><button type="button" class="popover-close close" ><span class="glyphicon glyphicon-remove"></span></button><h5 class="popover-title"></h5><div class="popover-content"></div></div>'
            });
            jQuery(this).popover('toggle');

        });

        jQuery('.fuelux').on('click','.popover-close',function() {
            jQuery(".popover").popover('hide');
        });

        jQuery("input[name='opdrecord[advice_attributes][immobilization]']").on('change', function() {
            if (this.value == "Yes") {
                jQuery('.castorsplint-label').show();
                jQuery('.radio_castorsplint').show();
            }
            else if (this.value == "No") {
                jQuery('.radio_cast').hide();
                jQuery('.radio_splint').hide();
                jQuery('.castorsplint-label').hide();
                jQuery('.radio_castorsplint').hide();
                if (jQuery("input[name='opdrecord[advice_attributes][castorsplint]']").val() != null) {
                    jQuery("input[name='opdrecord[advice_attributes][castorsplint]']").val("");
                    jQuery("button[name='castorsplint']").removeClass('active');
                }
            }
        });

        jQuery(".opdrecord_procedureregion").on("change", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var selected_procedurefilename = jQuery('option:selected', this).attr('data-procedurefilename');
            var selected_procedureregionid = jQuery('option:selected', this).attr('data-regionid');
            var procedurelist_procedureregiontext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregiontext");
            var procedurelist_procedureregionfilenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregionfilename");
            jQuery("#"+procedurelist_procedureregiontext_id).val(selected_procedureregionid);
            jQuery("#"+procedurelist_procedureregionfilenametext_id).val(selected_procedurefilename);

            var params = { regionid: selected_procedureregionid, templatetype: selected_procedurefilename, speciality_id: "<%= @specalityid %>" };
            var proceduretype_config = { selected_procedure_no_fieldname: _remove_fieldname_from_id( jQuery(this).attr('id') ), procedureside: "procedureside", procedureapproach: "procedureapproach", proceduretype: "proceduretype", proceduresubqualifier: "proceduresubqualifier" };
            _jquery_ajax_get_params_config("/opd_records/populate_side_approach_procedures.json", params, "populate_side_approach_procedures_subqualifiers", proceduretype_config);
        });

        jQuery(".opdrecord_proceduretype").on("change", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var procedurelist_procedureregionfilenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregionnametext");
            var selected_proceduretype = jQuery('option:selected', this).attr('data-proceduretype');
            var procedurelist_proceduretypetext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "proceduretypetext");
            jQuery("#"+procedurelist_proceduretypetext_id).val(selected_proceduretype);
            var templatetype = jQuery('#opdrecord_templatetype').val();
            var params = { proceduretype: selected_proceduretype, templatetype: jQuery("#"+procedurelist_procedureregionfilenametext_id).val(), regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val(), speciality_id: "<%= @specalityid %>" };
            var proceduretype_config = { selected_procedure_no_fieldname: _remove_fieldname_from_id( jQuery(this).attr('id') ), fieldname: "procedurename", fieldnamequalifier: "procedurequalifier", regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val() };
            _jquery_ajax_get_params_config("/opd_records/populate_procedurename.json", params, "_populate_procedurename", proceduretype_config);
        });

        jQuery("#procedure").on("click", ".opdrecord_proceduretype1", function() {
            var regioncounter; //regioncounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            regioncounter = jQuery(this).attr('data-proceduretypecounter');

            var fieldcounter;
            /*if (jQuery("tr.procedurelist").length == 0){
             fieldcounter = 0;
             } else {
             fieldcounter = jQuery("tr.procedurelist").length;
             }*/
            if (jQuery(".procedurelist-tbody-added > .procedurelist").length == 0){
                fieldcounter = 0;
            } else {
                fieldcounter = jQuery(".procedurelist-tbody-added > .procedurelist").length;
            }

            var clicked_proceduretype_input_value = jQuery(this).attr('data-proceduretype');
            var clicked_proceduretype_input_array = clicked_proceduretype_input_value.split("###");
            var selected_proceduretype = clicked_proceduretype_input_array[0];
            var selected_proceduretypeid = clicked_proceduretype_input_array[1];

            var proceduretype_procedureregionnametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, regioncounter, "procedureregionnametext");
            var selected_proceduretype = selected_proceduretypeid;

            var params = { counter: fieldcounter, specalityfoldername: "<%= @speciality_folder_name %>", templatetype: "<%= @templatetype %>", proceduretype: selected_proceduretype, regionname: jQuery("#"+proceduretype_procedureregionnametext_id).val() };
            jQuery.ajax({
                type: "GET",
                dataType: "script",
                url: "/opd_records/add_procedurelist",
                data: {ajax: params, remote: "true" },
                async: false
            });

            _renumber_id_after_remove("tbody.procedurelist-tbody-added", "div.procedurelist-tbody-removed");

        return false;
    });

        jQuery("#procedure").on("change", ".opdrecord_procedureside", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var selected_procedureside = jQuery('option:selected', this).attr('data-side');
            var procedurelist_proceduresidetext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "proceduresidetext");
            jQuery("#"+procedurelist_proceduresidetext_id).val(selected_procedureside);
        });
        jQuery("#procedure").on("change", ".opdrecord_procedurestatus", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var selected_procedurestatus = jQuery('option:selected', this).attr('data-status');
            var procedurelist_procedurestatus_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedurestatustext");
            jQuery("#"+procedurelist_procedurestatus_id).val(selected_procedurestatus);
        });
        jQuery("#procedure").on("change", ".opdrecord_procedureapproach", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var selected_procedureapproach = jQuery('option:selected', this).attr('data-approach');
            var procedurelist_procedureapproach_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureapproachtext");
            jQuery("#"+procedurelist_procedureapproach_id).val(selected_procedureapproach);
        });
        jQuery("#procedure").on("change", ".opdrecord_procedurename", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var procedurelist_procedureregionfilenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedureregionnametext");
            var selected_procedurename = jQuery('option:selected', this).attr('data-procedurename');
            var procedurelist_procedurenametext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedurenametext");
            jQuery("#"+procedurelist_procedurenametext_id).val(selected_procedurename);
            var templatetype = jQuery('#opdrecord_templatetype').val();
            var params = { procedurename: selected_procedurename, templatetype: jQuery("#"+procedurelist_procedureregionfilenametext_id).val(), regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val(), speciality_id: "<%= @specalityid %>" };
            var procedurename_config = { selected_procedurename_no_fieldname: _remove_fieldname_from_id( jQuery(this).attr('id') ), fieldname: "procedurequalifier", fieldnamesubtype: "procedurename", regionfilename:  jQuery("#"+procedurelist_procedureregionfilenametext_id).val() };
            _jquery_ajax_get_params_config("/opd_records/populate_procedurequalifier.json", params, "_populate_procedurequalifier", procedurename_config);
        });
        jQuery("#procedure").on("change", ".opdrecord_procedurequalifier", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var selected_procedurequalifier = jQuery('option:selected', this).attr('data-procedurequalifier');
            var procedurelist_procedurequalifiertext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "procedurequalifiertext");
            jQuery("#"+procedurelist_procedurequalifiertext_id).val(selected_procedurequalifier);
        });
        jQuery("#procedure").on("change", ".opdrecord_proceduresubqualifier", function() {
            var fieldcounter;
            fieldcounter = _split_underscore_from_id_attr(jQuery(this).attr('id'), 3); //jQuery(this).attr('id').split("_")[3];
            var selected_proceduresubqualifier = jQuery('option:selected', this).attr('data-proceduresubqualifier');
            var procedurelist_proceduresubqualifiertext_id = _contruct_id_attr_common(ROOT, PROCEDURE, ATTRIBUTES, fieldcounter, "proceduresubqualifiertext");
            jQuery("#"+procedurelist_proceduresubqualifiertext_id).val(selected_proceduresubqualifier);
        });

        jQuery("input[name='opdrecord[advice_attributes][castorsplint]']").on('change', function() {
            if (this.value == "Cast") {
                jQuery('.radio_cast').show();
                jQuery('.radio_splint').hide();
            }
            else if (this.value == "Splint") {
                jQuery('.radio_splint').show();
                jQuery('.radio_cast').hide();
            }
        });

        jQuery("input[name='opdrecord[advice_attributes][refertophysiotherpist]']").on('change', function() {
                if (this.value == "Yes") {
                    jQuery('.physiotherapyadvice-checkbox').show();
                    jQuery('.checkbox_physiotherapyadvice').show();
                    jQuery('.physiotherapyadvicecommentbox-textarealabel').show();
                    jQuery('#opdrecord_physiotherapyadvicecommentbox').show();
                }
                else if (this.value == "No") {
                    jQuery('.physiotherapyadvice-checkbox').hide();
                    jQuery('.checkbox_physiotherapyadvice').hide();
                    jQuery('.physiotherapyadvicecommentbox-textarealabel').hide();
                    jQuery('#opdrecord_physiotherapyadvicecommentbox').hide();
                        if (jQuery("input[name='opdrecord[advice_attributes][physiotherapyadvice]']").val() != null) {
                             jQuery("input[name='opdrecord[advice_attributes][physiotherapyadvice]']").val("");
                             jQuery("button[name='physiotherapyadvice']").removeClass('active');
                        }
                }
        });

        jQuery("input[name='opdrecord[advice_attributes][otherprecautions]']").on('change', function() {
            if (this.value == "Yes") {
                jQuery('.otherprecautionscommentbox-textarealabel').show();
                jQuery('#opdrecord_otherprecautionscommentbox').show();
            }
            else if (this.value == "No") {
                jQuery('.otherprecautionscommentbox-textarealabel').hide();
                jQuery('#opdrecord_otherprecautionscommentbox').hide();
            }
        });

        jQuery("input[name='opdrecord[advice_attributes][otherreference]']").on('change', function() {
                if (this.value == "Yes") {
                        jQuery('.otherreferencecommentbox-textarealabel').show();
                        jQuery('#opdrecord_otherreferencecommentbox').show();
                }
                else if (this.value == "No") {
                        jQuery('.otherreferencecommentbox-textarealabel').hide();
                        jQuery('#opdrecord_otherreferencecommentbox').hide();
                }
        });

        jQuery("#opdrecord_physiotherapyadvice, #opdrecord_otherprecautions").select2({
            tags: true,
            tokenSeparators: [',', ';'],
            createTag: function (tag) {
                return {
                    id: "#!##"+new_tags_unique_id(),
                    text: tag.term
                };
            },
            theme: "bootstrap",
            minimumInputLength: 1,
            multiple: true,
            ajax: {
                type: "GET",
                url: "/out_patient_templates_tags/search_advice_tag",
                dataType: 'json',
                delay: 250,
                data: function (params) {
                      return {
                        q: params.term, // search term
                        page: params.page
                      };
                },
                processResults: function (data, page) {
                    return {
                        results: jQuery.map(data, function (item) {
                            return {
                                text: item.text,
                                id: item.id
                            }
                        })
                    };
                },
                cache: true
            }
            //,
            //escapeMarkup: function (markup) { return markup; },
            //templateResult: formatRepo,
            //templateSelection: hgtemplateSelection
        });

//        jQuery("#opdrecord_physiotherapyadvice, #opdrecord_otherprecautions").select2({
//          tags: true,
//          tokenSeparators: [],
//          createTag: function (tag) {
//            return {
//              id: "#!##"+new_tags_unique_id(),
//              text: tag.term
//            };
//          },
//          theme: "bootstrap",
//          minimumInputLength: 1,
//          multiple: true,
//          ajax: {
//            type: "GET",
//            url: "/out_patient_templates_tags/search_advice_tag",
//            dataType: 'json',
//            delay: 250,
//            data: function (params) {
//              return {
//                q: params.term, // search term
//                page: params.page
//              };
//            },
//            processResults: function (data, page) {
//              return {
//                results: jQuery.map(data, function (item) {
//                  return {
//                    text: item.text,
//                    id: item.id
//                  }
//                })
//              };
//            },
//            cache: true
//          }
//          //,
//          //escapeMarkup: function (markup) { return markup; },
//          //templateResult: formatRepo,
//          //templateSelection: hgtemplateSelection
//        });

        jQuery('.expressplan_select2_selectedtags').on('select2:select', function (e) {
          var current_class = jQuery(this).attr("class");
          var target_tags_id = jQuery(this).attr("target-tags-id");
          var target_tagnames_id = jQuery(this).attr("target-tagnames-id");
          var target_tags_value = "";
          var target_tagnames_value = "";
          var target_tags_prev_value = jQuery("#" + target_tags_id).val();
          var target_tagnames_prev_value = jQuery("#" + target_tagnames_id).val();
          //if(target_tags_prev_value !== "") {
          if (target_tags_prev_value.length > 0) {
            var id_values_array = target_tags_prev_value.split(",");
            var names_values_array = target_tagnames_prev_value.split(",");

            console.log(e.params['data'].id)

            id_values_array.push(e.params['data'].id);
            names_values_array.push(e.params['data'].text);
          } else {
            var id_values_array = [];
            var names_values_array = [];
            id_values_array.push(e.params['data'].id);
            names_values_array.push(e.params['data'].text);
          }
          //target_value = values_array.toString();
          jQuery("#" + target_tags_id).val(id_values_array.toString());
          jQuery("#" + target_tagnames_id).val(names_values_array.toString());
          //jQuery("#"+target_id).trigger("change");
        });


  jQuery('.select2-selection__rendered').on('keydown',function(e) {

      var code = e.keyCode || e.which;
      if (code === 188 || code === 186) {
        var containerid = ($(this).parents('div')[0].id);
        var selectchild = (jQuery("#" + containerid)[0]).firstElementChild.id
        var target_tags_id = $("#" + selectchild).attr("target-tags-id")
        var target_tagnames_id = $("#" + selectchild).attr("target-tagnames-id");

        var target_tags_value = "";
        var target_tagnames_value = "";
        var target_tags_prev_value = jQuery("#" + target_tags_id).val();
        var target_tagnames_prev_value = jQuery("#" + target_tagnames_id).val();

        setTimeout(function() {
//          console.log(selectchild)
          var current_tag_id = $("#" + selectchild).find("option").last().text()
          var current_tag_val = $("#" + selectchild).find("option").last().val()
//          console.log("current_id", current_tag_id)
//          console.log("current_val", current_tag_val)

          //if(target_tags_prev_value !== "") {
          if (target_tags_prev_value.length > 0) {
            var id_values_array = target_tags_prev_value.split(",");
            var names_values_array = target_tagnames_prev_value.split(",");

            id_values_array.push(current_tag_val);
            names_values_array.push(current_tag_id);
          } else {
            var id_values_array = [];
            var names_values_array = [];
            id_values_array.push(current_tag_val);
            names_values_array.push(current_tag_id);
          }

          //target_value = values_array.toString();
          jQuery("#" + target_tags_id).val(id_values_array.toString());
          jQuery("#" + target_tagnames_id).val(names_values_array.toString());
          //jQuery("#"+target_id).trigger("change");

        },100);

      }

  });


        $("#opdrecord_physiotherapyadvice").on('change', function(ev){
          lis = $(ev.currentTarget).parent().find("ul.select2-selection__rendered li");
          for(i = 0; i < lis.length; i++){
            attach_event_to_x(lis[i]);
          }
        }).change();

        function attach_event_to_x(li){
          $(li).find(".select2-selection__choice__remove").on('click', function(e) {

            target_field = $("#opdrecord_physiotherapyadvice_selectedtagnames")
            target_value = $(target_field).val()

            target_field_id = $("#opdrecord_physiotherapyadvice_selectedtags")
            target_value_id = $(target_field_id).val()

            val_to_replace = $(e.currentTarget).parent().text().replace("×", "")

            value_array = target_value.split(",")
            value_array_id = target_value_id.split(",")

            index = value_array.indexOf(val_to_replace);

            value_array.splice(index, 1);
            value_array_id.splice(index, 1);

            target_field.val(value_array.join(","))
            target_field_id.val(value_array_id.join(","))
          });
        }

        $("#opdrecord_otherprecautions").on('change', function(ev){
          lis = $(ev.currentTarget).parent().find("ul.select2-selection__rendered li");
          for(i = 0; i < lis.length; i++){
            attach_event_to_x_opdrecord_otherprecautions(lis[i]);
          }
        }).change();

        function attach_event_to_x_opdrecord_otherprecautions(li){
          $(li).find(".select2-selection__choice__remove").on('click', function(e) {

            target_field = $("#opdrecord_otherprecautions_selectedtagnames")
            target_value = $(target_field).val()

            target_field_id = $("#opdrecord_otherprecautions_selectedtags")
            target_value_id = $(target_field_id).val()

            val_to_replace = $(e.currentTarget).parent().text().replace("×", "")

            value_array = target_value.split(",")
            value_array_id = target_value_id.split(",")

            index = value_array.indexOf(val_to_replace);

            value_array.splice(index, 1);
            value_array_id.splice(index, 1);

            target_field.val(value_array.join(","))
            target_field_id.val(value_array_id.join(","))
          });
        }

        jQuery('.procedurelist-tbody-added').on('click', "a[name*='removeprocedurebutton']", function() {
            event.preventDefault();
            var procedurelist_removed_tr_html;
            var fieldcounter;
            fieldcounter = jQuery(this).attr('id').slice(-1);
            var procedurelist_tr_array = jQuery(this).parents('.procedurelist').find(".id");
            if (procedurelist_tr_array.length > 0) {
                jQuery(this).parents('.procedurelist').find("input[name*='_destroy']").val("1");
                procedurelist_removed_tr_html = jQuery(this).parents('.procedurelist').wrap('<p/>').parent().html();
                jQuery(this).parents('.procedurelist').unwrap();
                jQuery('.procedurelist-tbody-removed').append(procedurelist_removed_tr_html);
                jQuery(this).parents('.procedurelist').remove();
                _renumber_id_after_remove("tbody.procedurelist-tbody-added", "div.procedurelist-tbody-removed");
            } else {
                jQuery(this).parents('.procedurelist').remove();
                _renumber_id_after_remove("tbody.procedurelist-tbody-added", "div.procedurelist-tbody-removed");
            }
        });
});