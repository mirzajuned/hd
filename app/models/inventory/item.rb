# used
class Inventory::Item
  include Mongoid::Document
  include Mongoid::Attributes::Dynamic
  include Mongoid::Timestamps

  scope :is_active, -> { where(is_deleted: false, is_disabled: false) }

  field :reference_id, type: BSON::ObjectId
  field :item_code, type: String                            # autogenerated
  field :category, type: String                             # Medication/consumables/opticals etc
  field :category_id, type: BSON::ObjectId                            # Medication/consumables/opticals etc
  field :sub_category_id, type: BSON::ObjectId                        # Medication/consumables/opticals etc
  field :sub_category_name, type: String    
  field :category_name, type: String                             # Medication/consumables/opticals etc
  field :quantity, type: String
  field :description, type: String                          # name of the item
  field :barcode_present, type: Boolean, default: false     # will generate the barcode if selected true
  field :barcode, type: String
  field :barcode_id, type: String
  field :system_generated_barcode, type: Boolean, default: true

  field :price_range, type: String

  field :manufacturer, type: String
  field :hsn_no, type: String

  field :tax_rate, type: Float
  field :tax_name, type: String
  field :tax_group_id, type: BSON::ObjectId
  field :tax_inclusive, type: Boolean, default: true

  field :checkoutable, type: Boolean, default: true
  field :stock, type: Float, default: 0 # All stock of lots combined
  field :empty, type: Boolean, default: true # to check out of stock
  field :inventory_capacity, type: Integer, default: 0 # if 0 means no entry  is done, it helps in min item alert.

  field :checkout_count, type: Integer, default: 0

  field :dispensing_unit, type: String
  field :dispensing_unit_name, type: String
  field :dispensing_unit_id, type: BSON::ObjectId
  field :threshold, type: Integer, default: 30      # in %
  field :threshold_value, type: Integer, default: 0 # in no.
  field :fixed_threshold, type: Boolean, default: false # for fixed threshold value
  field :running_low, type: Boolean, default: true # for running low items
  field :package_type, type: String, default: 'Box'
  field :measurement_unit, type: String

  field :sub_package_units, type: String
  field :sub_package_type, type: String, default: 'Number'

  field :item_units, type: String
  field :sub_units, type: String
  field :item_type, type: String, default: 'Number'

  field :brand, type: String
  field :pricing_index, type: String # Low, Medium, High

  field :color_present, type: Boolean
  field :prescription_mandatory, type: Boolean # True If a doctor prescription is required to dispatch the item.
  field :expiry_present, type: Boolean

  field :is_deleted, type: Boolean, default: false # for soft delete
  field :is_disabled, type: Boolean, default: false # for soft delete
  field :in_cart, type: Boolean, default: false # to persist the cart

  field :store_id, type: BSON::ObjectId
  field :department_id, type: String
  field :department_name, type: String

  field :model_no, type: String

  field :search, type: String

  field :medicine_class, type: Array, default: []

  field :generic_display_name, type: String
  field :generic_display_ids, type: Array, default: []
  field :medicine_from, type: String, default: 'master'

  field :stockable, type: Boolean, default: true

  field :level, type: String, default: 'organisation' # store, organisation, etc
  field :unit_level, type: Boolean, default: false # To make item at unit level as well

  field :integration_identifier, type: BSON::ObjectId # Used for integrating with 3rd Party HIS or other Inventory Solutions to pass item information during API integration.

  belongs_to :facility, class_name: '::Facility', optional: true
  belongs_to :organisation, class_name: '::Organisation'

  field :created_from, type: String

  field :is_activated, type: Boolean, default: true # this field will be used to rake purpose

  field :variant_reference_identifiers, type: Array, default: []
  field :vendor_id, type: BSON::ObjectId

  # has_many :stocks, class_name: "::Inventory::Item::Stock", dependent: :destroy
  has_many :lots, class_name: '::Inventory::Item::Lot'

  has_many :variants, class_name: '::Inventory::Item::Variant'

  embeds_many :custom_fields, class_name: '::Inventory::Item::CustomField'

  embeds_many :generic_names, class_name: '::Inventory::Item::GenericName'

  embeds_many :medicine_class_name, class_name: '::Inventory::Item::MedicineClassName'

  accepts_nested_attributes_for :custom_fields,
                                reject_if: proc { |attributes| attributes['name'].blank? },
                                allow_destroy: true

  accepts_nested_attributes_for :generic_names,
                                reject_if: proc { |attributes| attributes['name'].blank? },
                                allow_destroy: true

  accepts_nested_attributes_for :medicine_class_name,
                                reject_if: proc { |attributes| attributes['medicine_class_id'].blank? },
                                allow_destroy: true

  def self.build(*args)
    item = new
    item.custom_fields.build(*args)
    item
  end

  def calculate_stock
    Inventory::Item::Lot.where(item_id: id, is_deleted: false).pluck(:stock).inject(&:+)
  end

  validates :tax_group_id, presence: true
  validates :description, presence: true
end
